web:https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

instalar Rust:
- curl https://sh.rustup.rs -sSf | sh
# rustc --version

cargo: es una herramienta de compilacion para paquetes y proyectos Rust
# cargo --version
# cargo run // compila y ejecuta el programa usando cargo 
# cargo check // asegurarse de que compila pero no produce un ejecutable


# Para generar una aplicación binaria, invoque el compilador Rust pasándole el nombre del archivo fuente:rustc hello.rs  
## ./hello

# En Rust, los paquetes de código se denominan cajas 

GUI: Rust no tiene marco propio para GUI 
# usar biblioteca rust-gtk
# cargo new --bin ejemplo // Esto nos crea un directorio ejemplo con los ficheros básico
# agregar a cargo.toml //Cargo.toml, que es el fichero de configuración
# tener instalado cmake
# sudo dnf install gtk3-devel glib2-devel gtksourceview3-devel webkitgtk4-devel
########################################################################################################

[build-dependencies]
cmake = "0.1.48"
[dependencies]
gtk = { git = "https://github.com/gtk-rs/gtk3-rs.git" }
cmake = "0.1.48"

########################################################################################################


# extension de Rust: script.rs
# ejemplo de estructura:https://github.com/Rusty-Full-Stack/caja-supermercado
# https://rustyfullstack.com/blog/organizar-codigo-en-rust-modulos

usar modulo:

- crearlo en lib.rs // pub mod nombre_modulo
- use proyecto::modulo; // en main.rs
- crear un archivo.rs
- pub mod nombre_archivo; // en lib.rs
- use proyecto::modulo::def //main.rs

###############################################################################

use modulo; // -> importación relativa al módulo actual
use ::modulo; // -> importación absoluta, llevaría a src/archivo.rs
use self::modulo; // -> relativo al módulo actual      
use super::modulo; // -> con super se puede acceder al módulo padre
##############################################################################


Contruir: Cuando su proyecto finalmente esté listo para su lanzamiento, 
puede usar cargo build --release para compilarlo con optimizaciones. 
Este comando creará un ejecutable en target/release en lugar 
de target/debug

conceptos utiles: 
- let: crea una variable
- En Rust, las variables son inmutables por defecto
- // sintaxis inicia un comentario
- los :: para llamar a funciones o metodos
- use std::io; entrada salida de datos de usuario 
- los & indican que este argumento es una referencia
- Cargo.toml contiene las dependencias que usara el programa // las descarga y se incluiran en tarjet 
- Cargo update // Actualización de una caja para obtener una nueva versión 
- Las funciones pueden devolver valores, debemos declarar su tipo después de una flecha ( ->)
- En Rust la memoria se gestiona a través de un sistema de propiedad con un conjunto de reglas 
que el compilador verifica. Si cualquiera de las reglas se viola, el programa no compilará. 
Ninguna de las características de propiedad ralentizará su programa mientras se está ejecutando.
- Las estructuras son similares a las tuplas. A diferencia de las tuplas, en una estructura nombrará 
cada dato para que quede claro lo que significan los valores. Para definir una estructura, ingresamos la palabra clave struct
- match permite comparar un valor con una serie de patrones y luego ejecutar código basado en qué patrón coincide.(como un swich)
- Una caja es la cantidad más pequeña de código que el compilador de Rust considera. Las Cajas puede 
contener módulos, y los módulos pueden estar definidos en otros archivos que obtienen compilado con la caja
- Una caja puede venir en una de dos formas: una caja binaria o una caja de biblioteca. 
- Un paquete es un conjunto de una o más cajas
- Rust agrupa los errores en dos categorías principales: recuperables e irrecuperables 
#######################################################################################################################################################################################################################

Cajas Binarias: 
Las cajas binarias son programas que puede compilar en un ejecutable 
que puede ejecutar, como un programa de línea de comandos o un servidor. 
Cada uno debe tener una función llamada main que define lo que sucede cuando 
se ejecuta el ejecutable. 

Caja biblioteca: 
Las cajas de la biblioteca no tienen main y no se compilan en un 
ejecutable. En su lugar, definen la funcionalidad destinada a 
ser compartida con múltiples proyectos. 

Paquete:
Un paquete es un conjunto de una o más cajas que proporciona un 
conjunto de funcionalidad. Un paquete contiene un archivo Cargo.toml 
que describe cómo construir esas cajas.
# Cargo es en realidad un paquete que contiene la caja binaria para la herramienta de línea de comandos
Un paquete puede contener tantas cajas binarias como desee, pero 
como máximo solo una cajón de la biblioteca. 
Un paquete debe contener al menos una caja, ya sea una biblioteca o 
caja binaria. 
Si un paquete contiene src/main.rs y src/lib.rs, 
tiene dos cajas: una binaria y una biblioteca, ambas con el mismo 
nombre como el paquete. Un paquete puede tener varias cajas binarias 
colocando archivos en el directorio src/bin : cada archivo será 
una caja binaria separada. 

# info sobre los modulos: https://doc.rust-lang.org/book/ch07-02-defining-modules-to-control-scope-and-privacy.html


Errores irrecuperables con panic!

Hay dos formas de causar un pánico en la práctica: 
al tomar una acción que hace que nuestro código entre en pánico 
(como accediendo a una matriz más allá del final) o 
llamando explícitamente al panic! macro.

################################################################################################################################################################3

fn main() {
    panic!("crash and burn");

}

################################################################################################################################################################3


Errores recuperables con Result

La mayoría de los errores no son lo suficientemente graves como para requerir que el programa se detenga.
Trepresenta el tipo del valor que se devolverá en caso de éxito 
dentro del Ok variante, y Erepresenta el tipo de error que se 
devolverá en un caso de falla dentro del Errvariante.

################################################################################################################################################################3
enum Result<T, E> {
    Ok(T),
    Err(E),
}

################################################################################################################################################################3

# Tenga en cuenta que, al igual que el Option enum, Result enum y 
sus variantes no necesita especificar Result:: antes de Ok y err 
# https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html


# rustup install nightly :es un crate que permite la integración entre Python y Rust.
# ejecutar e interactuar con código de Python desde Rust.
# PyO3 soporta Python 3.5 en adelante
# https://dev.to/mattdark/integrar-rust-a-tus-proyectos-python-5ckj

Publicar una caja en Crates.io:

puedes compartir tu código con otras personas publicando 
sus propios paquetes.

